/*
    Hilt 는 애플리케이션에서 DI 를 사용하는 표준적인 방법을 제공
    1. Dagger 사용의 단순화
    2. 표준화된 컴포넌트 세트와 스코프로 설정과 가독성/이해도 쉽게
    3. 쉬운 방법으로 다양한 빌드타입에 대해 다른 바인딩 제공
    4. 컴포넌트들은 계층으로 이루어지며, 하위 컴포넌트는 상위컴포넌가 가진 의존성에 접근 가능 (직계관계일 때만:SubComponent)
    Hilt 를 사용하는 모든 앱은 @HiltAndroidApp 으로 주석이 지정된 Application 클래스를 포함해야 한다.
    앱의 상위 구성요소인 application 객체의 수명주기에 연결되어, 이와 관련한 종속항목을 제공

    @Inject - 의존주입을 요청하고 객체 생성방법을 Hilt 에 알려줌
    @Module - 위의 어노테이션으로 주입한 객체를 생성하여 컴포넌트에 전달. 모듈과 컴포넌트를 연결하는 어노테이션이 @InstallIn
        - Repository 와 같이 @Inject 를 통하여 주입 대상을 간단히 유추하는 경우, @Module 의 정의는 불필요
        - @Binds : 모듈 클래스 내 주입할 객체가 인터페이스인 경우, 정의하며, 주입할 인터페이스의 구현 클래스를 매개변수로,
            해당 인터페이스의 타입으로 리턴하는 메서드를 생성하면 됨. 대신, 모듈과 해당 메서드는 abstract 로 선언해야 한다.
        - @Provides : 모듈 클래스 내 주입할 객체가 레트로핏의 Builder 패턴을 이용하는 것과 같이 Hilt 가 객체를
          직접 주입받을 수 없는 경우 선언해야 한다. 이는 일반 클래스와 일반 메서드로 선언하면 된다.
          파라메터로 다른 객체를 받아서 처리해야 하는 경우, 해당 객체를 주입받아 처리해야 한다.
    @Component - 위의 Module 이 생성한 객체를 @Inject 에 주입

    DI 의 특징
    - 클래스간 결합도를 낮춘다
    - 인터페이스 기반으로 설계되며, 코드를 유연하게 한다.
    - Stub 또는 Mock 객체를 사용하여 단위테스트를 하기가 더욱 쉬워진다.

    안드로이드의 클래스들은 안드로이드 프레임워크에 의하여 인스턴스화 하므로, 클래스 내부에 생성자를 만들거나,
    매개변수를 전달하는 방법이 불가능하여, 의존성주입 구현이 어렵다.
    LifeCycle 와 계층별로 잘 정리된 객체들을 공유할 수 있는 방법을 제공.
    같은결과에 대해 다양한 방법이 존재.
*/

@HiltAndroidApp // Application 은 안드로이드 어플리케이션의 최상위 클래스. Hilt 는 Dagger 를 이용한 주입에
                // 생명주기 관리를 용이하게 하기 위하여 각각의 스코프에 맞춤 컴포넌트가 있고,
                // 이러한 시작을 위하여 Application 객체를 이용하기 때문
                // 애플리케이션 수준 종속항목 컨테이너 역할. 모든 의존성 주입의 시작점 이를 선언하여, SingletonComponent 가 생성된다.
                // 컴파일 시 'Hilt_' 라는 접두어가 붙은 어플리케이션 클래스를 생성한다. 생성된 클래스는 Base클래스가
                // 상속한 클래스를 모두 똑같이 상속함 컴프넌트 생성 및 주입코드를 여기에 모두 포함.
                // 이 과정 이후 @AndroidEntryPoint 를 사용할수 있게 되고, 해당 어노테이션이 추가된 안드로이드 클래스에
                // DI 컨테이너를 추가한다. 즉, 이 과정은 컴포넌트를 생성. 엔트리포인트는 서브컴포넌트를 생성


/*
    * ComponentHierarchy and HiltScope
리젠드
컴포넌트
1. 스코프
 - Hilt 는 ModuleClass 에서 표준화된 @Scope 를 통하여 동일 인스턴스를 공유할 수 있다.
 - TODO 모듈에서 사용되는 Scope 어노테이션은 반드시 @InstallIn 에 명시된 컴포넌트와 쌍을 이루는 스코프를 사용해야 한다.!
2. (기본 바인딩)
 - 컴포넌트는 다음과 같은 객체들을 기본적으로 그래프에 바인딩함
 - @ApplicationContext, @ActivityContext 컨텍스트를 한정자를 통하여 명확히 요청하여 이를 제공받을수도 있다.
           SingletonComponent
           1. Singleton
           2. (Application)   \
                    |          \
    ActivityRetainedComponent    ServiceComponent
    1. ActivityRetainedScope      1. ServiceScoped
    2. (Application)              2. (Application, Service)
                    |
                 ActivityComponent
                 1. ActivityScoped
                 2. (Application, Activity)
                    |                    \
        FragmentComponent                 \  ViewComponent
        1. FragmentScoped                    1. ViewScoped
        2. (Application, Activity, Fragment) 2. (Application, Activity, View)
                    |
    ViewWithFragmentComponent
    1. ViewScoped
    2. (Application, Activity, Fragment, View)
*/

/*
    @InstallIn
    - Hilt 가 생성하는 DI 컨테이너에 어떤 모듈을 사용할 지 가리키는 역할. 올바르지 않은 컴포넌트와 스코프를 사용하면 컴파일 에러 발생
      -> 하위컴포넌트와 상위컴포넌트 모두 @Module 이 필요할 경우, 상위모듈을 설치할 것!
    - @Module 에는 반드시 @InstallIn 이 있어야 하며, Dagger 프로젝트를 Hilt 프로젝트로 Migration 하는 경우
    @InstallIn 검사를 비활성화 해야 하는 경우가 있을 수 있다.
*/

/*
    @EntryPoint
    Hilt 가 지원하지 않는 클래스에서 의존성이 필요한 경우 사용.
    (ex. ContentProvider, DFM, Dagger 를 사용하지 않는 3rd-party 라이브러리)
    - @EntryPoint 는 인터페이스에서만 사용 가능
    - @InstallIn 이 반드시 함께 있어야 한다.
    - EntryPoints 클래스의 static 메서드를 통하여 그래프에 접근

    1. ContentProvider
    2. DFM
*/

/*
     Android X Extensions
     1. @ViewModelInject

     ViewModel 의 인스턴스 생성방식은 매우 기묘하여, 초기 대거로 뷰모델 주입은 매우 까다로웠음
     - 컴포넌트 인스턴스화 종료 이후, 변경이 가능한 savedStateHandle 을 대거의 그래프에 포함시키는 것은 불가능
     - 이를 Hilt 에서 생성자에 @ViewModelInject 및 @Assisted savedStateHandle 을 통하여 간단하게 구현

     2. @WorkerInject
*/

/*
    * CustomComponent

    - 어노테이션
     @DefineComponent
     @DefineComponent.Builder

    - 제약 조건
     반드시 ApplicationComponent 의 하위 계층의 컴포넌트로
     표준 컴포넌트 계층 사이에 추가할 수 없음
*/